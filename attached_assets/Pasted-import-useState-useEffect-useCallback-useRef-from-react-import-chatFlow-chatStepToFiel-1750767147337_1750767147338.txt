import { useState, useEffect, useCallback, useRef } from "react";
import { chatFlow, chatStepToField, type ChatOption } from "@/lib/chatFlow";
import {
  nameSchema,
  phoneSchema,
  emailSchema,
  insertConsultationSchema,
} from "../../../shared/schema";
import { type ChatbotSettings } from "@/services/chatbotSettings";

// Fallback-safe clinic source logic
function determineClinicSource(hostname: string): string {
  if (hostname.includes("nailsurgery") || hostname.includes("nail-surgery")) {
    return "nail_surgery_clinic";
  } else if (hostname.includes("footcare") || hostname.includes("foot-care")) {
    return "footcare_clinic";
  } else if (hostname.includes("lasercare") || hostname.includes("laser-care")) {
    return "lasercare_clinic";
  } else {
    return "footcare_clinic";
  }
}

export function useChat() {
  const [stepKey, setStepKey] = useState<keyof typeof chatFlow>("welcome");
  const [chatbotSettings] = useState<ChatbotSettings | null>(null); // temporarily disable fetch
  const [chatHistory, setChatHistory] = useState<{ from: "bot" | "user"; message: string }[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [responses, setResponses] = useState<Record<string, any>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [inputType, setInputType] = useState<"text" | "email" | "tel" | "textarea">("text");
  const [options, setOptions] = useState<ChatOption[] | null>(null);
  const [validation, setValidation] = useState<((value: string) => boolean) | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [allowImageUpload, setAllowImageUpload] = useState(false);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  const currentStep = chatFlow[stepKey];

  const scrollToBottom = () => {
    setTimeout(() => {
      chatContainerRef.current?.scrollTo({
        top: chatContainerRef.current.scrollHeight,
        behavior: "smooth",
      });
    }, 100);
  };

  const sendMessage = useCallback(
    async (value: string) => {
      if (!currentStep) return;

      const fieldKey = chatStepToField[stepKey];
      const isValid = currentStep.validation ? currentStep.validation(value) : true;

      if (!isValid) {
        setChatHistory((prev) => [
          ...prev,
          { from: "bot", message: currentStep.errorMessage || "Invalid input" },
        ]);
        scrollToBottom();
        return;
      }

      if (fieldKey) {
        setResponses((prev) => ({ ...prev, [fieldKey]: value }));
      }

      setChatHistory((prev) => [...prev, { from: "user", message: value }]);
      setInputValue("");

      setTimeout(() => {
        const nextStep =
          typeof currentStep.next === "function"
            ? currentStep.next(value)
            : currentStep.next;
        if (nextStep) {
          setStepKey(nextStep as keyof typeof chatFlow);
        }
      }, 100);
    },
    [currentStep, stepKey]
  );

  const startChat = useCallback(() => {
    const firstStep = chatFlow["welcome"];
    const fallbackMessage = "Welcome! How can I assist you today?";

    if (firstStep && typeof firstStep.message === "function") {
      const message = firstStep.message({}, null);
      setChatHistory([{ from: "bot", message: message || fallbackMessage }]);
    } else if (firstStep?.message) {
      setChatHistory([{ from: "bot", message: firstStep.message || fallbackMessage }]);
    } else {
      setChatHistory([{ from: "bot", message: fallbackMessage }]);
    }

    scrollToBottom();
  }, []);

  useEffect(() => {
    if (!currentStep) return;

    const delay = currentStep.delay || 0;

    const showMessage = () => {
      let msg = "";
      if (typeof currentStep.message === "function") {
        msg = currentStep.message(responses, chatbotSettings) || "";
      } else {
        msg = currentStep.message || "";
      }

      if (msg) {
        setChatHistory((prev) => [...prev, { from: "bot", message: msg }]);
      }

      setInputType(currentStep.input || "text");
      setOptions(currentStep.options || null);
      setValidation(() => currentStep.validation || null);
      setErrorMessage(currentStep.errorMessage || null);
      setAllowImageUpload(!!currentStep.imageUpload);

      scrollToBottom();
    };

    setIsLoading(true);
    setTimeout(() => {
      showMessage();
      setIsLoading(false);
    }, delay);
  }, [stepKey]);

  useEffect(() => {
    startChat();
  }, []);

  return {
    chatbotSettings,
    stepKey,
    chatHistory,
    inputValue,
    setInputValue,
    sendMessage,
    inputType,
    options,
    validation,
    errorMessage,
    allowImageUpload,
    chatContainerRef,
  };
}
